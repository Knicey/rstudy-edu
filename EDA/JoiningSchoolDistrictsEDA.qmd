---
title: "Joining School Districts"
author: "Nathan Yang"
format: pdf
editor: visual
editor_options: 
  chunk_output_type: console
---

## Libraries/Packages

```{r}
#| label: load-pkg-data
#| echo: false
#| message: false
#| warning: false
library(knitr) 
library(patchwork)
library(dplyr)
library(stringr)
library(stringdist)
library(readxl)
library(haven)
library(readr)
library(ggplot2)
```

```{r}
#| label: load-school-district-data
#| echo: false
#| message: false

#Academic performance data from the Educational Opportunity Project
test_admindist_gys <- read_csv(
  'data/EDOpportunity/seda2023_admindist_poolsub_gys_updated_20240205.csv'
  )

### School District Level Data

#ACS data on poverty levels
#acs_poverty <- read_csv('data/ACS/ACSST1Y2021.S1701-Data.csv', skip = 1)

#ACS data on bachelor attainment
#acs_bachelor <- read_csv('data/ACS/ACSST1Y2021.S1502-Data.csv', skip = 1)

#Common Core of Data (CCD)
ccd_financial <- read_sas(
  unz(
    "data/CCD/sdf22_1a_sas7bdat.zip", 
    "sdf22_1a.sas7bdat"
  )
)

#Longitudinal School Demographic Dataset (LSDD)
#lsdd <- read_dta('data/LSDD/LSDD_v1_beta.dta')


### Remember to update the trim for csdh
csdh_data <- read.csv("data/COVIDSchoolDataHub/District_Monthly_Shares_03.08.23.csv")

### County Level Data

#Census - School Districts and Associated Counties
census_school_districts <- read_xls(
  'data/Census - School Districts and Counties/sdlist-21.xls',
  skip = 2
)


#ACS data on social characteristics
acs_social <- read_csv('data/ACS/CountyData/ACSDP5Y2022.DP02-Data.csv', skip = 1)

#ACS data on economic characteristics
acs_economic <- read_csv('data/ACS/CountyData/ACSDP5Y2022.DP03-Data.csv', skip = 1)

#ACS data on housing characteristics
acs_housing <- read_csv('data/ACS/CountyData/ACSDP5Y2022.DP04-Data.csv', skip = 1)

#ACS data on demographics and housing estimates
acs_demo <- read_csv('data/ACS/CountyData/ACSDP5Y2022.DP05-Data.csv', skip = 1)

#ACS data on employment characteristics
acs_employment <- read_csv('data/ACS/CountyData/ACSST5Y2022.S2302-Data.csv', skip = 1)

```

```{r}
#| label: load-county-data

#Social Capital Project - County Level Data
scp_county_data <- read_excel(
  'data/SocialCapitalProject/Social Capital Project Social Capital Index Data.xlsx',
  sheet = 'County Index',
  skip = 2
)

```

## Trimming Datasets

```{r}
#| label: prepare-district-data-for-joining

### SEDA Data for schools that have recorded math scores for the all students subgroup
test_mth_all_admindist_gys <- test_admindist_gys |>
  filter(subject == 'mth' & subgroup == 'all') |>
  rename(seda_district = sedaadminname) |>
  #Special exception case for many school districts that ended with " SD"
  mutate(
    seda_district = sub(" SD", "", seda_district)
  ) |>
  select(sedaadmin, seda_district, stateabb)


```

```{r}
#| label: trim-acs-datasets

### Function to rename and split columns in ACS datasets since they follow a common format
trim_acs_dataset <- function(dataset) {
  dataset |>
    mutate(
      state = sub(".*,\\s", "", dataset$'Geographic Area Name'),
      #state.abb and state.name are innate datasets in R
      stateabb = state.abb[match(state, state.name)],
      acs_region = gsub(",\\s*[A-Za-z ]+$", "", sub(" School District,.*$", "", dataset$'Geographic Area Name')),
    ) |>
    select(state, stateabb, acs_region, everything())
}

trim_acs_social <- trim_acs_dataset(acs_social) |>
  rename(
    married_household = "Percent!!HOUSEHOLDS BY TYPE!!Total households!!Married-couple household",
    married_household_children = "Percent!!HOUSEHOLDS BY TYPE!!Total households!!Married-couple household!!With children of the householder under 18 years",
    male_married = "Percent!!MARITAL STATUS!!Males 15 years and over!!Now married, except separated",
    female_married = "Percent!!MARITAL STATUS!!Females 15 years and over!!Now married, except separated",
    male_never_married = "Percent!!MARITAL STATUS!!Males 15 years and over!!Never married",
    female_never_married = "Percent!!MARITAL STATUS!!Females 15 years and over!!Never married",
    male_divorced ="Percent!!MARITAL STATUS!!Males 15 years and over!!Divorced",
    female_divorced = "Percent!!MARITAL STATUS!!Females 15 years and over!!Divorced",
    birth_last_year_unmarried = "Percent!!FERTILITY!!Number of women 15 to 50 years old who had a birth in the past 12 months",
    over_25_highschool_degree = "Percent!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!High school graduate (includes equivalency)",
    over_25_associates_degree = "Percent!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!Associate's degree",
    over_25_bachelors_degree = "Percent!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!Bachelor's degree",
    over_25_graduate_degree = "Percent!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!Graduate or professional degree",
    native_born = "Percent!!PLACE OF BIRTH!!Total population!!Native",
    only_english = "Percent!!LANGUAGE SPOKEN AT HOME!!Population 5 years and over!!English only",
    non_english = "Percent!!LANGUAGE SPOKEN AT HOME!!Population 5 years and over!!Language other than English",
    with_computer = "Percent!!COMPUTERS AND INTERNET USE!!Total households!!With a computer",
    with_internet = "Percent!!COMPUTERS AND INTERNET USE!!Total households!!With a broadband Internet subscription",
  ) |>
  select(stateabb, acs_region, married_household, married_household_children, male_married, female_married, male_never_married, female_never_married, male_divorced, female_divorced, birth_last_year_unmarried, over_25_highschool_degree, over_25_associates_degree, over_25_bachelors_degree, over_25_graduate_degree, native_born, only_english, non_english, with_computer, with_internet)

trim_acs_economic <- trim_acs_dataset(acs_economic) |>
  rename(
    unemployment = "Percent!!EMPLOYMENT STATUS!!Civilian labor force!!Unemployment Rate",
    median_income = "Estimate!!INCOME AND BENEFITS (IN 2022 INFLATION-ADJUSTED DOLLARS)!!Families!!Median family income (dollars)",
    mean_income = "Estimate!!INCOME AND BENEFITS (IN 2022 INFLATION-ADJUSTED DOLLARS)!!Families!!Mean family income (dollars)",
    with_health_insurance = "Percent!!HEALTH INSURANCE COVERAGE!!Civilian noninstitutionalized population!!With health insurance coverage",
    poverty = "Percent!!PERCENTAGE OF FAMILIES AND PEOPLE WHOSE INCOME IN THE PAST 12 MONTHS IS BELOW THE POVERTY LEVEL!!All families",
  ) |>
  select(stateabb, acs_region, unemployment, median_income, mean_income, with_health_insurance, poverty)

trim_acs_housing <- trim_acs_dataset(acs_housing) |>
  rename(
    owner_occupied_value = "Estimate!!VALUE!!Owner-occupied units!!Median (dollars)",
    occupancy = "Percent!!HOUSING OCCUPANCY!!Total housing units!!Occupied housing units",
    SMOC = "Estimate!!SELECTED MONTHLY OWNER COSTS (SMOC)!!Housing units without a mortgage!!Median (dollars)",
    rent = "Estimate!!GROSS RENT!!Occupied units paying rent!!Median (dollars)",
    mortgage_percentage = "Percent!!MORTGAGE STATUS!!Owner-occupied units!!Housing units with a mortgage",
  ) |>
  select(stateabb, acs_region, owner_occupied_value, occupancy, SMOC, rent, mortgage_percentage)

trim_acs_demo <- trim_acs_dataset(acs_demo) |>
  rename(
    population = "Estimate!!SEX AND AGE!!Total population",
    sex_ratio = "Estimate!!SEX AND AGE!!Total population!!Sex ratio (males per 100 females)",
    hispanic_percent = "Percent!!HISPANIC OR LATINO AND RACE!!Total population",
    white_percent = "Percent!!RACE!!Total population!!One race!!White",
    black_percent = "Percent!!RACE!!Total population!!One race!!Black or African American",
    asian_percent = "Percent!!RACE!!Total population!!One race!!Asian",
  ) |>
  select(stateabb, acs_region, population, sex_ratio, hispanic_percent, white_percent, black_percent, asian_percent)
  

trim_acs_employment <- trim_acs_dataset(acs_employment) |>
  rename(
    no_workers = "Estimate!!Percent!!WORK STATUS CHARACTERISTICS!!Families!!No workers in the past 12 months",
    one_worker = "Estimate!!Percent!!WORK STATUS CHARACTERISTICS!!Families!!1 worker in the past 12 months",
    employment_past_year = "Estimate!!Percent!!WORK STATUS CHARACTERISTICS!!Married-couple families!!Householder worked full-time, year-round in the past 12 months:",
  ) |>
  select(stateabb, acs_region, no_workers, one_worker, employment_past_year)

```

```{r}
#| label: trim-ccd-dataset

trim_ccd_financial <- ccd_financial |>
  rename(
    stateabb = STABBR,
    ccd_district = NAME,
    membership = MEMBERSCH,
    total_revenue = TOTALREV,
    total_fed_revenue = TFEDREV,
  ) |>
  select(stateabb, ccd_district, membership, total_revenue, total_fed_revenue)

```

```{r}
#| label: trim-census-dataset

trim_census_sdc <- census_school_districts |>
  rename(
    stateabb = `State Postal Code`
  ) |>
  select(
    stateabb, `School District Name`, `County Names`
  )
```

```{r}
#| label: trim-csdh-dataset

trim_csdh <- csdh_data |>
  rename(
    stateabb = StateAbbrev
  ) |>
  select(
    -c(NCESDistrictID)
  ) |>
  filter(
    month == "2021m1"
  )
```

```{r}
#| label: trim-scp-dataset

trim_scp_county_data <- scp_county_data |>
  rename(
    stateabb = `State Abbreviation`
  ) |>
  select(
    stateabb, County, `County-Level Index`, `Family Unity`, `Community Health`,
    `Institutional Health`, `Collective Efficacy`
    ) |>
  mutate(
    County = paste(County, 'County', sep = ' ')
  )

```

## Calculating Similarity Scores

```{r}
#| label: calculate-scores-and-filter

### Calculate String Distance using the stringdist package
### Also calculate Jaccard distance for 2-gram (1 - Jaccard Similarity)

get_best_similarities <- function(
    dataset1, dataset2, 
    column1, column2, 
    jaccard_threshold, dist_threshold,
    state = TRUE, full = FALSE
    ) {
  
  ### This function assume both datasets have a stateabb column (this is necessary for joining/avoiding excess comparisons)
  
  similarities <- full_join(dataset1, dataset2, by = c('stateabb' = 'stateabb'), relationship = "many-to-many") |>
    mutate(
      dist = stringdist::stringdist(!!sym(column1), !!sym(column2)),
      jaccard = stringdist::stringdist(!!sym(column1), !!sym(column2), method = 'jaccard', q = 2)
    ) |>
    select(stateabb, !!sym(column1), !!sym(column2), dist, jaccard, everything()) |>
    arrange(dist)
  
  best_similarities <- similarities |>
    ### Filters for school district names that start with the same letter
    filter(substr(!!sym(column1), 1, 1) == substr(!!sym(column2), 1, 1)) |>
    
    ### Filters for school district names that end with the same last three letters
    ### This is to help resolve county vs city school district names
    ### And also school district names that end in roman numerals
    filter(str_sub(!!sym(column1), -3) == str_sub(!!sym(column2), -3)) |>
    
    ### Filters for score thresholds
    filter(jaccard <= jaccard_threshold & dist <= dist_threshold) |>
    
    ### Group by state and seda district and find the minimum score tie by Jaccard
    group_by(sedaadmin) |>
    slice_min(order_by = dist, with_ties = TRUE) |>  # Find minimum dist, allowing ties
    slice_min(order_by = jaccard, with_ties = FALSE) |>  # Break ties by selecting the minimum jaccard
    ungroup() |>
    arrange(jaccard)
  
  if (full) {
    return(best_similarities)
  }
    
  return(best_similarities[, -c(1:5)])
}

best_sim_ccd <- get_best_similarities(test_mth_all_admindist_gys, trim_ccd_financial, 'seda_district', 'ccd_district', 0.3, 6)

best_sim_csdh <- get_best_similarities(test_mth_all_admindist_gys, trim_csdh, 'seda_district', 'DistrictName', 0.3, 6, full = FALSE)

best_sim_census_counties <- get_best_similarities(test_mth_all_admindist_gys, trim_census_sdc, 'seda_district', 'School District Name', 0.3, 3, full = TRUE)[, -c(2:5)]

### Join County on County Name
### Append county to academic performance data and match by county name

best_sim_scp_data <- get_best_similarities(best_sim_census_counties, trim_scp_county_data, 'County Names', 'County', 0.9, 10)

best_sim_social <- get_best_similarities(best_sim_census_counties, trim_acs_social, 'County Names', 'acs_region', 0.3, 6)

best_sim_economic <- get_best_similarities(best_sim_census_counties, trim_acs_economic, 'County Names', 'acs_region', 0.3, 6)

best_sim_housing <- get_best_similarities(best_sim_census_counties, trim_acs_housing, 'County Names', 'acs_region', 0.3, 6)

best_sim_demo <- get_best_similarities(best_sim_census_counties, trim_acs_demo, 'County Names', 'acs_region', 0.3, 6)

best_sim_employment <- get_best_similarities(best_sim_census_counties, trim_acs_employment, 'County Names', 'acs_region', 0.3, 6)

```

## Merging Datasets

```{r}
#| label: merging-best-similarity-datasets

all_scores <- test_admindist_gys |>
  filter(subgroup == 'all') |>
  rename(seda_district = sedaadminname) |>
  #Special exception case for many school districts that ended with " SD"
  mutate(
    seda_district = sub(" SD", "", seda_district)
  ) |>
  select(sedaadmin, seda_district, stateabb, subject, gys_mn_2019_ol, gys_mn_2022_ol, gys_mn_2023_ol)

### Merge the best similarity datasets with the original datasets
comprehensive_dataset <- all_scores |>
  left_join(best_sim_census_counties, by = c('sedaadmin' = 'sedaadmin', 'stateabb' = 'stateabb')) |>
  left_join(best_sim_csdh, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_ccd, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_scp_data, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_social, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_economic, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_housing, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_demo, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_employment, by = c('sedaadmin' = 'sedaadmin'))
  
```

## Comprehensive Dataset EDA

```{r First-Priority-Filter}
### First priority is the academic performance data
filter1a <- comprehensive_dataset |>
  filter(!if_any(c(gys_mn_2019_ol, gys_mn_2022_ol), is.na))
filter1b <- comprehensive_dataset |>
  filter(!if_any(c(gys_mn_2019_ol, gys_mn_2022_ol, gys_mn_2023_ol), is.na))

### Graph Comparing how many rows are left after filtering by 2019, 2022, and 2023 versus just 2019 and 2022
ggplot() +
  geom_bar(data = filter1a, aes(x = '2019 and 2022'), ) +
  annotate("text", x = '2019 and 2022', y = nrow(filter1a) - 500, label = nrow(filter1a), color = "lightblue") +
  geom_bar(data = filter1b, aes(x = '2019, 2022, and 2023')) +
  annotate("text", x = '2019, 2022, and 2023', y = nrow(filter1b) - 500, label = nrow(filter1b), color = "lightblue") +
  labs(title = 'Number of Rows Left After 1st Filter',
       x = 'Filtering Criteria',
       y = 'Number of Rows') +
  theme_minimal()
```

```{r Second-Priority-Filter}
### Second priority is the ACS data 
filter2a <- filter1a |>
  filter(!if_any(colnames(best_sim_demo), is.na)) |>
  filter(!if_any(colnames(best_sim_economic), is.na)) |>
  filter(!if_any(colnames(best_sim_employment), is.na)) |>
  filter(!if_any(colnames(best_sim_housing), is.na)) |>
  filter(!if_any(colnames(best_sim_social), is.na))

filter2b <- filter1b  |>
  filter(!if_any(colnames(best_sim_demo), is.na)) |>
  filter(!if_any(colnames(best_sim_economic), is.na)) |>
  filter(!if_any(colnames(best_sim_employment), is.na)) |>
  filter(!if_any(colnames(best_sim_housing), is.na)) |>
  filter(!if_any(colnames(best_sim_social), is.na))

### Graph Comparing how many rows are left after filtering by ACS data
ggplot() +
  geom_bar(data = filter2a, aes(x = '2019 and 2022'), ) +
  annotate("text", x = '2019 and 2022', y = nrow(filter2a) - 500, label = nrow(filter2a), color = "lightblue") +
  geom_bar(data = filter2b, aes(x = '2019, 2022, and 2023')) +
  annotate("text", x = '2019, 2022, and 2023', y = nrow(filter2b) - 500, label = nrow(filter2b), color = "lightblue") +
  labs(title = 'Number of Rows Left After 2nd Filter',
       x = 'Filtering Criteria',
       y = 'Number of Rows') +
  scale_y_continuous(limits = c(0, 7060)) +
  theme_minimal()
```

```{r Third-Priority-Filter}
### Third priority is the SCP data
filter3a <- filter2a |>
  filter(!if_any(colnames(best_sim_scp_data), is.na))

filter3b <- filter2b |>
  filter(!if_any(colnames(best_sim_scp_data), is.na))

### Graph Comparing how many rows are left after filtering by SCP data
ggplot() +
  geom_bar(data = filter3a, aes(x = '2019 and 2022'), ) +
  annotate("text", x = '2019 and 2022', y = nrow(filter3a) - 500, label = nrow(filter3a), color = "lightblue") +
  geom_bar(data = filter3b, aes(x = '2019, 2022, and 2023')) +
  annotate("text", x = '2019, 2022, and 2023', y = nrow(filter3b) - 500, label = nrow(filter3b), color = "lightblue") +
  labs(title = 'Number of Rows Left After 3rd Filter',
       x = 'Filtering Criteria',
       y = 'Number of Rows') +
  scale_y_continuous(limits = c(0, 7060)) +
  theme_minimal()

```

```{r Fourth-Priority-Filter}
### Fourth priority is the CSDH data
filter4a <- filter3a |>
  filter(!if_any(colnames(best_sim_csdh), is.na))
filter4b <- filter3b |>
  filter(!if_any(colnames(best_sim_csdh), is.na))

### Graph Comparing how many rows are left after filtering by CSDH data
ggplot() +
  geom_bar(data = filter4a, aes(x = '2019 and 2022'), ) +
  annotate("text", x = '2019 and 2022', y = nrow(filter4a) - 500, label = nrow(filter4a), color = "lightblue") +
  geom_bar(data = filter4b, aes(x = '2019, 2022, and 2023')) +
  annotate("text", x = '2019, 2022, and 2023', y = nrow(filter4b) - 500, label = nrow(filter4b), color = "lightblue") +
  labs(title = 'Number of Rows Left After 4th Filter',
       x = 'Filtering Criteria',
       y = 'Number of Rows') +
  scale_y_continuous(limits = c(0, 7060)) +
  theme_minimal()
```

```{r Exporting-Final-Dataset}
write_csv(filter4b, 'data/IntegratedDataset.csv')

```

```{r Analysis-Fed-Rev-Test-Scores}

ggplot() +
  geom_point(data = filter4b, aes(x = total_fed_revenue,  y = gys_mn_2022_ol - gys_mn_2019_ol), color = 'blue') +
  labs(title = 'Total Federal Revenue vs Change in Math Scores from 2019 to 2022',
       x = 'Total Federal Revenue',
       y = 'Change in Math Scores') +
  theme_minimal()


ggplot() +
  geom_point(data = filter4b, aes(x = total_fed_revenue,  y = gys_mn_2023_ol - gys_mn_2019_ol), color = 'orange') +
  labs(title = 'Total Federal Revenue vs Change in Math Scores from 2019 to 2023',
       x = 'Total Federal Revenue',
       y = 'Change in Math Scores') +
  theme_minimal()

ggplot() +
  geom_point(data = filter4b, aes(x = total_fed_revenue,  y = gys_mn_2023_ol - gys_mn_2022_ol), color = 'darkgreen') +
  labs(title = 'Total Federal Revenue vs Change in Math Scores from 2022 to 2023',
       x = 'Total Federal Revenue',
       y = 'Change in Math Scores') +
  theme_minimal()

```

```{r Analysis-County-Index-Test-Scores}

ggplot() +
  geom_point(data = filter4b, aes(x = `Family Unity`,  y = gys_mn_2022_ol - gys_mn_2019_ol), color = 'blue') +
  labs(title = 'Family Unity Index vs Change in Math Scores from 2019 to 2022',
       x = 'Family Unity Index',
       y = 'Change in Math Scores') +
  theme_minimal()

ggplot() +
  geom_point(data = filter4b, aes(x = `Family Unity`,  y = gys_mn_2023_ol - gys_mn_2019_ol), color = 'orange') +
  labs(title = 'Family Unity Index vs Change in Math Scores from 2019 to 2023',
       x = 'Family Unity Index',
       y = 'Change in Math Scores') +
  theme_minimal()

ggplot() +
  geom_point(data = filter4b, aes(x = `Family Unity`,  y = gys_mn_2023_ol - gys_mn_2022_ol), color = 'darkgreen') +
  labs(title = 'Family Unity Index vs Change in Math Scores from 2022 to 2023',
       x = 'Family Unity Index',
       y = 'Change in Math Scores') +
  theme_minimal()

ggplot() +
  geom_point(data = filter4b, aes(x = `Community Health`,  y = gys_mn_2022_ol - gys_mn_2019_ol), color = 'blue') +
  labs(title = 'Community Health Index vs Change in Math Scores from 2019 to 2022',
       x = 'Community Health Index',
       y = 'Change in Math Scores') +
  theme_minimal()

ggplot() +
  geom_point(data = filter4b, aes(x = `Community Health`,  y = gys_mn_2023_ol - gys_mn_2019_ol), color = 'orange') +
  labs(title = 'Community Health Index vs Change in Math Scores from 2019 to 2023',
       x = 'Community Health Index',
       y = 'Change in Math Scores') +
  theme_minimal()

ggplot() +
  geom_point(data = filter4b, aes(x = `Community Health`,  y = gys_mn_2023_ol - gys_mn_2022_ol), color = 'darkgreen') +
  labs(title = 'Community Health Index vs Change in Math Scores from 2022 to 2023',
       x = 'Community Health Index',
       y = 'Change in Math Scores') +
  theme_minimal()

ggplot() +
  geom_point(data = filter4b, aes(x = `Institutional Health`,  y = gys_mn_2022_ol - gys_mn_2019_ol), color = 'blue') +
  labs(title = 'Institutional Health Index vs Change in Math Scores from 2019 to 2022',
       x = 'Institutional Health Index',
       y = 'Change in Math Scores') +
  theme_minimal()

ggplot() +
  geom_point(data = filter4b, aes(x = `Institutional Health`,  y = gys_mn_2023_ol - gys_mn_2019_ol), color = 'orange') +
  labs(title = 'Institutional Health Index vs Change in Math Scores from 2019 to 2023',
       x = 'Institutional Health Index',
       y = 'Change in Math Scores') +
  theme_minimal()

ggplot() +
  geom_point(data = filter4b, aes(x = `Institutional Health`,  y = gys_mn_2023_ol - gys_mn_2022_ol), color = 'darkgreen') +
  labs(title = 'Institutional Health Index vs Change in Math Scores from 2022 to 2023',
       x = 'Institutional Health Index',
       y = 'Change in Math Scores') +
  theme_minimal()


```

```{r Analysis-ACS-Data-Test-Scores}

ggplot() +
  geom_point(data = filter4b, aes(x = as.numeric(over_25_bachelors_degree),  y = gys_mn_2022_ol - gys_mn_2019_ol), color = 'blue') +
  labs(title = 'Percent of Population with Bachelor\'s Degree vs Change in Math Scores from 2019 to 2022',
       x = 'Percent of Population with Bachelor\'s Degree',
       y = 'Change in Math Scores') +
  theme_minimal()

ggplot() +
  geom_point(data = filter4b, aes(x = as.numeric(over_25_bachelors_degree),  y = gys_mn_2023_ol - gys_mn_2019_ol), color = 'orange') +
  labs(title = 'Percent of Population with Bachelor\'s Degree vs Change in Math Scores from 2019 to 2023',
       x = 'Percent of Population with Bachelor\'s Degree',
       y = 'Change in Math Scores') +
  theme_minimal()

ggplot() +
  geom_point(data = filter4b, aes(x = as.numeric(over_25_bachelors_degree),  y = gys_mn_2023_ol - gys_mn_2022_ol), color = 'darkgreen') +
  labs(title = 'Percent of Population with Bachelor\'s Degree vs Change in Math Scores from 2022 to 2023',
       x = 'Percent of Population with Bachelor\'s Degree',
       y = 'Change in Math Scores') +
  theme_minimal()

```

```{r Correlation-Calculations}

correlations22_19 <- lapply(filter4b, function(x) {
  cor(filter4b$gys_mn_2022_ol - filter4b$gys_mn_2019_ol, as.numeric(x))
})

correlations23_19 <- lapply(filter4b, function(x) {
  cor(filter4b$gys_mn_2023_ol - filter4b$gys_mn_2019_ol, as.numeric(x))
})

correlations23_22 <- lapply(filter4b, function(x) {
  cor(filter4b$gys_mn_2023_ol - filter4b$gys_mn_2022_ol, as.numeric(x))
})

  
```
