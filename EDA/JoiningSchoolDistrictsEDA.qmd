---
title: "Joining School Districts"
author: "Nathan Yang"
format: pdf
editor: visual
editor_options: 
  chunk_output_type: console
---

## Libraries/Packages

```{r}
#| label: load-pkg-data
#| echo: false
#| message: false
#| warning: false
library(knitr) 
library(tidyverse)
library(patchwork)
library(dplyr)
library(stringr)
library(stringdist)
library(readxl)
library(haven)
```

```{r}
#| label: load-school-district-data
#| echo: false
#| message: false

#Academic performance data from the Educational Opportunity Project
test_admindist_gys <- readr::read_csv(
  'data/EDOpportunity/seda2023_admindist_poolsub_gys_updated_20240205.csv'
  )

#ACS data on child characteristics
acs_child_characteristics <- readr::read_csv(
  'data/ACS/acs-child-characteristics_2021.csv', 
  skip = 1
  )

### School District Level Data

#ACS data on poverty levels
acs_poverty <- read_csv('data/ACS/ACSST1Y2021.S1701-Data.csv', skip = 1)

#ACS data on bachelor attainment
acs_bachelor <- read_csv('data/ACS/ACSST1Y2021.S1502-Data.csv', skip = 1)

#ACS data on education atainment
acs_education <- read_csv('data/ACS/ACSST1Y2021.S1501-Data.csv', skip = 1)

#ACS data on school enrollment
acs_enrollment <- read_csv('data/ACS/ACSST1Y2021.S1401-Data.csv', skip = 1)

#ACS data on martial status
acs_marital <- read_csv('data/ACS/ACSST1Y2021.S1201-Data.csv', skip = 1)

#ACS Data Profile on Housing
acs_housing <- read_csv('data/ACS/ACSDP1Y2021.DP04-Data.csv', skip = 1)

#Common Core of Data (CCD)
ccd_financial <- read_sas(
  unz(
    "data/CCD/sdf22_1a_sas7bdat.zip", 
    "sdf22_1a.sas7bdat"
  )
)

#Covid School Data Hub (CSDH)
csdh_files <- dir(
  path = 'data/COVIDSchoolDataHub/CSDH District Files - CSV/', 
  pattern = '.csv', 
  full.names = TRUE
  )

#Longitudinal School Demographic Dataset (LSDD)
#lsdd <- read_dta('data/LSDD/LSDD_v1_beta.dta')

#This function is needed since some columnms are read in as different types in some CSVs but not others
read_csv_as_character <- function(file) {
  read_csv(file, col_types = cols(.default = "c"))
}

csdh_data <- lapply(cdsh_files, read_csv_as_character)
csdh_data <- bind_rows(csdh_data)

### County Level Data

#Census - School Districts and Associated Counties
census_school_districts <- read_xls(
  'data/Census - School Districts and Counties/sdlist-21.xls',
  skip = 2
)

### ADD IN MORE DP (data profile) datasets

#ACS data on social characteristics
acs_social <- read_csv('data/ACS/CountyData/ACSDP5Y2022.DP02-Data.csv', skip = 1)

#ACS data on economic characteristics
acs_economic <- read_csv('data/ACS/CountyData/ACSDP5Y2022.DP03-Data.csv', skip = 1)

#ACS data on demographics and housing estimates
acs_demo_housing <- read_csv('data/ACS/CountyData/ACSDP5Y2022.DP05-Data.csv', skip = 1)

#ACS data on employment characteristics
acs_employment <- read_csv('data/ACS/CountyData/ACSST5Y2022.S2302-Data.csv', skip = 1)

```

```{r}
#| label: load-county-data

#Social Capital Project - County Level Data
scp_county_data <- read_excel(
  'data/SocialCapitalProject/Social Capital Project Social Capital Index Data.xlsx',
  sheet = 'County Index',
  skip = 2
)

```

```{r}
#| label: prepare-district-data-for-joining

### SEDA Data
test_mth_all_admindist_gys <- test_admindist_gys |>
  filter(subject == 'mth' & subgroup == 'all') |>
  rename(seda_district = sedaadminname) |>
  #Special exception case for many school districts that ended with " SD"
  mutate(
    seda_district = sub(" SD", "", seda_district)
  ) |>
  select(sedaadmin, seda_district, stateabb)


```

```{r}
#| label: trim-acs-datasets

### Function to rename and split columns in ACS datasets since they follow a common format
trim_acs_dataset <- function(dataset) {
  dataset |>
    mutate(
      state = sub(".*,\\s", "", dataset$'Geographic Area Name'),
      #state.abb and state.name are innate datasets in R
      stateabb = state.abb[match(state, state.name)],
      acs_region = gsub(",\\s*[A-Za-z ]+$", "", sub(" School District,.*$", "", dataset$'Geographic Area Name')),
    ) |>
    select(state, stateabb, acs_region, everything())
}

trim_acs_social <- trim_acs_dataset(acs_social) |>
  rename(
    married_household = "Percent!!HOUSEHOLDS BY TYPE!!Total households!!Married-couple household",
    married_household_children = "Percent!!HOUSEHOLDS BY TYPE!!Total households!!Married-couple household!!With children of the householder under 18 years",
    male_married = "Percent!!MARITAL STATUS!!Males 15 years and over!!Now married, except separated",
    female_married = "Percent!!MARITAL STATUS!!Females 15 years and over!!Now married, except separated",
    male_never_married = "Percent!!MARITAL STATUS!!Males 15 years and over!!Never married",
    female_never_married = "Percent!!MARITAL STATUS!!Females 15 years and over!!Never married",
    male_divorced ="Percent!!MARITAL STATUS!!Males 15 years and over!!Divorced",
    female_divorced = "Percent!!MARITAL STATUS!!Females 15 years and over!!Divorced",
    birth_last_year = "Percent!!FERTILITY!!Number of women 15 to 50 years old who had a birth in the past 12 months",
    birth_last_year_unmarried = "Percent Margin of Error!!FERTILITY!!Number of women 15 to 50 years old who had a birth in the past 12 months",
    over_25_highschool_degree = "Percent!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!High school graduate (includes equivalency)",
    over_25_associates_degree = "Percent!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!Associate's degree",
    over_25_bachelors_degree = "Percent!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!Bachelor's degree",
    over_25_graduate_degree = "Percent!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!Graduate or professional degree",
    native_born = "Percent!!PLACE OF BIRTH!!Total population!!Native",
    only_english = "Percent!!LANGUAGE SPOKEN AT HOME!!Population 5 years and over!!English only",
    non_english = "Percent!!LANGUAGE SPOKEN AT HOME!!Population 5 years and over!!Language other than English",
    with_computer = "Percent!!COMPUTERS AND INTERNET USE!!Total households!!With a computer",
    with_internet = "Percent!!COMPUTERS AND INTERNET USE!!Total households!!With a broadband Internet subscription",
  )
  

acs_employment <- trim_acs_dataset(acs_employment) |>
  rename(
    no_workers = "Estimate!!Percent!!WORK STATUS CHARACTERISTICS!!Families!!No workers in the past 12 months",
    one_worker = "Estimate!!Percent!!WORK STATUS CHARACTERISTICS!!Families!!1 worker in the past 12 months",
    employment = "Estimate!!Percent!!WORK STATUS CHARACTERISTICS!!Families",
    
  ) |>
  select(stateabb, acs_region, no_workers, one_worker, employment)

```

```{r}
#| label: trim-ccd-dataset

trim_ccd_financial <- ccd_financial |>
  rename(
    stateabb = STABBR,
    ccd_district = NAME,
    membership = MEMBERSCH,
    total_revenue = TOTALREV,
    total_fed_revenue = TFEDREV,
  ) |>
  select(stateabb, ccd_district, membership, total_revenue, total_fed_revenue)

```

```{r}
#| label: trim-census-dataset

trim_census_sdc <- census_school_districts |>
  rename(
    stateabb = `State Postal Code`
  ) |>
  select(
    stateabb, `School District Name`, `County Names`
  )
```

```{r}
#| label: trim-csdh-dataset

trim_csdh <- csdh_data |>
  rename(
    stateabb = StateAbbrev
  ) |>
  mutate(
    TimePeriodStart = mdy(TimePeriodStart),
    TimePeriodEnd = mdy(TimePeriodEnd),
    EnrollmentTotal = as.numeric(EnrollmentTotal),
    EnrollmentInPerson = as.numeric(EnrollmentInPerson),
    EnrollmentHybrid = as.numeric(EnrollmentHybrid),
    EnrollmentVirtual = as.numeric(EnrollmentVirtual),
    days = as.numeric(difftime(TimePeriodEnd, TimePeriodStart, units = 'days'))                      
  ) |>
  select(
    stateabb, DistrictName, DistrictType, LearningModel, 
    TimePeriodStart, TimePeriodEnd, days, EnrollmentTotal,
    EnrollmentInPerson, EnrollmentHybrid, EnrollmentVirtual
  ) |>
  filter(
    TimePeriodStart == mdy('1/1/2021')
  )
```

```{r}
#| label: trim-scp-dataset

trim_scp_county_data <- scp_county_data |>
  rename(
    stateabb = `State Abbreviation`
  ) |>
  select(
    stateabb, County, `County-Level Index`, `Family Unity`, `Community Health`,
    `Institutional Health`, `Collective Efficacy`
    ) |>
  mutate(
    County = paste(County, 'County', sep = ' ')
  )

```

```{r}
#| label: calculate-scores-and-filter

### Calculate String Distance using the stringdist package
### Also calculate Jaccard distance for 2-gram (1 - Jaccard Similarity)

get_best_similarities <- function(
    dataset1, dataset2, 
    column1, column2, 
    jaccard_threshold, dist_threshold,
    state = TRUE, full = FALSE
    ) {
  
  ### This function assume both datasets have a stateabb column (this is necessary for joining/avoiding excess comparisons)
  
  similarities <- full_join(dataset1, dataset2, by = c('stateabb' = 'stateabb'), relationship = "many-to-many") |>
    mutate(
      dist = stringdist::stringdist(!!sym(column1), !!sym(column2)),
      jaccard = stringdist::stringdist(!!sym(column1), !!sym(column2), method = 'jaccard', q = 2)
    ) |>
    select(stateabb, !!sym(column1), !!sym(column2), dist, jaccard, everything()) |>
    arrange(dist)
  
  best_similarities <- similarities |>
    ### Filters for school district names that start with the same letter
    filter(substr(!!sym(column1), 1, 1) == substr(!!sym(column2), 1, 1)) |>
    
    ### Filters for school district names that end with the same last three letters
    ### This is to help resolve county vs city school district names
    ### And also school district names that end in roman numerals
    filter(str_sub(!!sym(column1), -3) == str_sub(!!sym(column2), -3)) |>
    
    ### Filters for score thresholds
    filter(jaccard <= jaccard_threshold & dist <= dist_threshold) |>
    
    ### Group by state and seda district and find the minimum score tie by Jaccard
    group_by(sedaadmin) |>
    slice_min(order_by = dist, with_ties = TRUE) |>  # Find minimum dist, allowing ties
    slice_min(order_by = jaccard, with_ties = FALSE) |>  # Break ties by selecting the minimum jaccard
    ungroup() |>
    arrange(jaccard)
  
  if (full) {
    return(best_similarities)
  }
    
  return(best_similarities[, -c(1:5)])
}

best_sim_poverty <- get_best_similarities(test_mth_all_admindist_gys, trim_acs_poverty, 'seda_district', 'acs_region', 0.3, 6)

best_sim_housing <- get_best_similarities(test_mth_all_admindist_gys, trim_acs_housing, 'seda_district', 'acs_region', 0.3, 6)

best_sim_financial <- get_best_similarities(test_mth_all_admindist_gys, trim_ccd_financial, 'seda_district', 'ccd_district', 0.3, 6)

best_sim_bachelor <- get_best_similarities(test_mth_all_admindist_gys, trim_acs_bachelor, 'seda_district', 'acs_region', 0.3, 6)

best_sim_education <- get_best_similarities(test_mth_all_admindist_gys, trim_acs_education, 'seda_district', 'acs_region', 0.3, 6)

best_sim_enrollment <- get_best_similarities(test_mth_all_admindist_gys, trim_acs_enrollment, 'seda_district', 'acs_region', 0.3, 6)

best_sim_marital <- get_best_similarities(test_mth_all_admindist_gys, trim_acs_marital, 'seda_district', 'acs_region', 0.3, 6)

best_sim_csdh <- get_best_similarities(test_mth_all_admindist_gys, trim_csdh, 'seda_district', 'DistrictName', 0.3, 6)


best_sim_census_counties <- get_best_similarities(test_mth_all_admindist_gys, trim_census_sdc, 'seda_district', 'School District Name', 0.3, 3, full = TRUE)[, -c(2:5)]

### Join County on County Name
### Append county to academic performance data and match by county name

best_sim_scp_data <- get_best_similarities(best_sim_census_counties, trim_scp_county_data, 'County Names', 'County', 0.9, 10)

best_sim_demo_housing <- get_best_similarities(best_sim_census_counties, trim_acs_demo_housing, 'County Names', 'acs_region', 0.3, 6)

best_sim_employment <- get_best_similarities(best_sim_census_counties, acs_employment, 'County Names', 'acs_region', 0.3, 6)

```

```{r}
#| label: merging-best-similarity-datasets

### Merge the best similarity datasets with the original datasets
comprehensive_dataset <- test_mth_all_admindist_gys |>
  left_join(best_sim_census_counties, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_poverty, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_housing, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_financial, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_bachelor, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_education, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_enrollment, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_marital, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_csdh, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_scp_data, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_demo_housing, by = c('sedaadmin' = 'sedaadmin')) |>
  left_join(best_sim_employment, by = c('sedaadmin' = 'sedaadmin'))
  
```
